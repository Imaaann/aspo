Running CLI module...
[INFO] Scanning for projects...
[INFO] 
[INFO] --------------------------< com.aspodev:cli >---------------------------
[INFO] Building cli 1.0.0
[INFO]   from pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- exec:3.5.0:java (default-cli) @ cli ---
[DEBUG] == File Parsing (Cleaner.java)
[DEBUG] == instruction found & cleaned: [package, com.aspodev.cleaner, ;]
[DEBUG] == instruction found & cleaned: [import, com.aspodev.utils.RegexTools, ;]
[DEBUG] == instruction found & cleaned: [public, class, Cleaner, {]
[DEBUG] == instruction found & cleaned: [public, static, void, cleanFile, (, StringBuilder, contents, ), {]
[DEBUG] == instruction found & cleaned: [cleanComments, (, contents, ), ;]
[DEBUG] == instruction found & cleaned: [cleanAnnotations, (, contents, ), ;]
[DEBUG] == instruction found & cleaned: [cleanStrings, (, contents, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [private, static, void, cleanStrings, (, StringBuilder, contents, ), {]
[DEBUG] == instruction found & cleaned: [String, singleLineString, ;]
[DEBUG] == instruction found & cleaned: [String, multiLineString, ;]
[DEBUG] == instruction found & cleaned: [RegexTools.removePattern, (, contents, ,, multiLineString, ), ;]
[DEBUG] == instruction found & cleaned: [RegexTools.removePattern, (, contents, ,, singleLineString, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [private, static, void, cleanComments, (, StringBuilder, contents, ), {]
[DEBUG] == instruction found & cleaned: [String, multiLineComment, ;]
[DEBUG] == instruction found & cleaned: [String, singleLineComment, ;]
[DEBUG] == instruction found & cleaned: [RegexTools.removePattern, (, contents, ,, singleLineComment, ), ;]
[DEBUG] == instruction found & cleaned: [RegexTools.removePattern, (, contents, ,, multiLineComment, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [private, static, void, cleanAnnotations, (, StringBuilder, contents, ), {]
[DEBUG] == instruction found & cleaned: [String, annotations, ;]
[DEBUG] == instruction found & cleaned: [RegexTools.removePattern, (, contents, ,, annotations, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == File Parsing (AspoCommand.java)
[DEBUG] == instruction found & cleaned: [package, com.aspodev.cli, ;]
[DEBUG] == instruction found & cleaned: [import, java.lang.Runnable, ;]
[DEBUG] == instruction found & cleaned: [import, java.nio.file.Path, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.List, ;]
[DEBUG] == instruction found & cleaned: [import, com.aspodev.TypeParser.TypeParser, ;]
[DEBUG] == instruction found & cleaned: [import, com.aspodev.parser.Parser, ;]
[DEBUG] == instruction found & cleaned: [import, com.aspodev.resolver.PathResolver, ;]
[DEBUG] == instruction found & cleaned: [import, picocli.CommandLine.Command, ;]
[DEBUG] == instruction found & cleaned: [import, picocli.CommandLine.Option, ;]
[DEBUG] == instruction found & cleaned: [import, picocli.CommandLine.Parameters, ;]
[DEBUG] == instruction found & cleaned: [public, class, AspoCommand, implements, Runnable, {]
[DEBUG] == instruction found & cleaned: [private, boolean, noFileOutputs, ;]
[DEBUG] == instruction found & cleaned: [private, boolean, moreMetrics, ;]
[DEBUG] == instruction found & cleaned: [private, Integer, devMode, ;]
[DEBUG] == instruction found & cleaned: [private, String, targetPath, ;]
[DEBUG] == instruction found & cleaned: [public, void, run, (, ), {]
[DEBUG] == instruction found & cleaned: [long, start, System.currentTimeMillis, (, ), ;]
[DEBUG] == instruction found & cleaned: [PathResolver, pathResolver, new, PathResolver, (, targetPath, ), ;]
[DEBUG] == instruction found & cleaned: [List, <, Path, >, javaFilePaths, pathResolver.getAllJavaPaths, (, ), ;]
[DEBUG] == instruction found & cleaned: [TypeParser, typeParser, new, TypeParser, (, javaFilePaths, ), ;]
[DEBUG] == instruction found & cleaned: [(, devMode, null, ), {]
[DEBUG] == instruction found & cleaned: [System.out.println, (, javaFilePaths.get, (, devMode, ), .getFileName, (, ), ), ;]
[DEBUG] == instruction found & cleaned: [Parser, parser, new, Parser, (, javaFilePaths.get, (, devMode, ), ,, typeParser, ), ;]
[DEBUG] == instruction found & cleaned: [parser.parse, (, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [{]
[DEBUG] == instruction found & cleaned: [(, Path, p, :]
[DEBUG] == instruction found & cleaned: [javaFilePaths, ), {]
[DEBUG] == instruction found & cleaned: [System.out.println, (, p.getFileName, (, ), ), ;]
[DEBUG] == instruction found & cleaned: [Parser, parser, new, Parser, (, p, ,, typeParser, ), ;]
[DEBUG] == instruction found & cleaned: [parser.parse, (, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [long, end, System.currentTimeMillis, (, ), ;]
[DEBUG] == instruction found & cleaned: [System.out.println, (, (, end, start, ), ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == File Parsing (Main.java)
[DEBUG] == instruction found & cleaned: [package, com.aspodev.cli, ;]
[DEBUG] == instruction found & cleaned: [import, picocli.CommandLine, ;]
[DEBUG] == instruction found & cleaned: [public, class, Main, {]
[DEBUG] == instruction found & cleaned: [public, static, void, main, (, String, [, ], args, ), {]
[DEBUG] == instruction found & cleaned: [int, exitCode, new, CommandLine, (, new, AspoCommand, (, ), ), .execute, (, args, ), ;]
[DEBUG] == instruction found & cleaned: [System.exit, (, exitCode, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == File Parsing (InstructionBuilder.java)
[DEBUG] == instruction found & cleaned: [package, com.aspodev.parser.Instructions, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.ArrayList, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.Iterator, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.List, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.stream.Collectors, ;]
[DEBUG] == instruction found & cleaned: [import, com.aspodev.parser.ParserConstants, ;]
[DEBUG] == instruction found & cleaned: [public, class, InstructionBuilder, {]
[DEBUG] == instruction found & cleaned: [private, Iterator, <, String, >, iterator, ;]
[DEBUG] == instruction found & cleaned: [private, List, <, String, >, instruction, ;]
[DEBUG] == instruction found & cleaned: [public, InstructionBuilder, (, Iterator, <, String, >, iterator, ), {]
[DEBUG] == instruction found & cleaned: [this.iterator, iterator, ;]
[DEBUG] == instruction found & cleaned: [this.instruction, new, ArrayList, <, >, (, 32, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [public, void, build, (, ), {]
[DEBUG] == instruction found & cleaned: [(, iterator.hasNext, (, ), ), {]
[DEBUG] == instruction found & cleaned: [String, token, iterator.next, (, ), ;]
[DEBUG] == instruction found & cleaned: [(, token.equals, (, ), token.equals, (, ), token.equals, (, ), token.equals, (, ), ), {]
[DEBUG] == instruction found & cleaned: [instruction.add, (, token, ), ;]
[DEBUG] == instruction found & cleaned: [;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [instruction.add, (, token, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [public, void, clean, (, ), {]
[DEBUG] == instruction found & cleaned: [instruction, instruction.stream, (, ), .filter, (, (, token, ), ->, ParserConstants.skippableTokens.contains, (, token, ), ), .collect, (, Collectors.toList, (, ), ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [public, String, toString, (, ), {]
[DEBUG] == instruction found & cleaned: [instruction.toString, (, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == File Parsing (Parser.java)
[DEBUG] == instruction found & cleaned: [package, com.aspodev.parser, ;]
[DEBUG] == instruction found & cleaned: [import, java.nio.file.Path, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.Iterator, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.List, ;]
[DEBUG] == instruction found & cleaned: [import, com.aspodev.TypeParser.TypeParser, ;]
[DEBUG] == instruction found & cleaned: [import, com.aspodev.parser.Instructions.InstructionBuilder, ;]
[DEBUG] == instruction found & cleaned: [import, com.aspodev.tokenizer.Tokenizer, ;]
[DEBUG] == instruction found & cleaned: [public, class, Parser, {]
[DEBUG] == instruction found & cleaned: [private, TypeParser, parser, ;]
[DEBUG] == instruction found & cleaned: [private, List, <, String, >, tokens, ;]
[DEBUG] == instruction found & cleaned: [private, Iterator, <, String, >, iterator, ;]
[DEBUG] == instruction found & cleaned: [public, Parser, (, Path, path, ,, TypeParser, parser, ), {]
[DEBUG] == instruction found & cleaned: [this.parser, parser, ;]
[DEBUG] == instruction found & cleaned: [Tokenizer, tokenizer, new, Tokenizer, (, path, ), ;]
[DEBUG] == instruction found & cleaned: [tokenizer.tokenize, (, ), ;]
[DEBUG] == instruction found & cleaned: [this.tokens, tokenizer.getTokens, (, ), ;]
[DEBUG] == instruction found & cleaned: [this.iterator, tokens.iterator, (, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [public, void, parse, (, ), {]
[DEBUG] == instruction found & cleaned: [(, iterator.hasNext, (, ), ), {]
[DEBUG] == instruction found & cleaned: [InstructionBuilder, builder, new, InstructionBuilder, (, iterator, ), ;]
[DEBUG] == instruction found & cleaned: [builder.build, (, ), ;]
[DEBUG] == instruction found & cleaned: [builder.clean, (, ), ;]
[DEBUG] == instruction found & cleaned: [System.out.println, (, builder, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == File Parsing (ParserConstants.java)
[DEBUG] == instruction found & cleaned: [package, com.aspodev.parser, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.Set, ;]
[DEBUG] == instruction found & cleaned: [public, class, ParserConstants, {]
[DEBUG] == instruction found & cleaned: [public, static, Set, <, String, >, skippableTokens, Set.of, (, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == File Parsing (PathResolver.java)
[DEBUG] == instruction found & cleaned: [package, com.aspodev.resolver, ;]
[DEBUG] == instruction found & cleaned: [import, java.io.IOException, ;]
[DEBUG] == instruction found & cleaned: [import, java.nio.file.Files, ;]
[DEBUG] == instruction found & cleaned: [import, java.nio.file.Path, ;]
[DEBUG] == instruction found & cleaned: [import, java.nio.file.Paths, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.ArrayList, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.List, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.stream.Stream, ;]
[DEBUG] == instruction found & cleaned: [public, class, PathResolver, {]
[DEBUG] == instruction found & cleaned: [private, final, Path, path, ;]
[DEBUG] == instruction found & cleaned: [private, List, <, Path, >, javaFilePaths, ;]
[DEBUG] == instruction found & cleaned: [public, PathResolver, (, String, path, ), {]
[DEBUG] == instruction found & cleaned: [Constructor, this.path, this.resolvePath, (, path, ), ;]
[DEBUG] == instruction found & cleaned: [this.javaFilePaths, new, ArrayList, <, >, (, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [private, boolean, isValidPath, (, Path, path, ), {]
[DEBUG] == instruction found & cleaned: [Check, the, path, is, valid, {]
[DEBUG] == instruction found & cleaned: [path.toRealPath, (, ), ;]
[DEBUG] == instruction found & cleaned: [true, ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [catch, (, Exception, e, ), {]
[DEBUG] == instruction found & cleaned: [false, ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [private, Path, resolvePath, (, String, path, ), {]
[DEBUG] == instruction found & cleaned: [Resolve, the, path, (, path, null, path.isEmpty, (, ), ), {]
[DEBUG] == instruction found & cleaned: [Check, the, path, is, null, or, empty, Paths.get, (, ), ;]
[DEBUG] == instruction found & cleaned: [Return, empty, path, }]
[DEBUG] == instruction found & cleaned: [Path, resolvedPath, Paths.get, (, path, ), .toAbsolutePath, (, ), .normalize, (, ), ;]
[DEBUG] == instruction found & cleaned: [Get, absolute, path, (, isValidPath, (, resolvedPath, ), ), {]
[DEBUG] == instruction found & cleaned: [Check, the, path, is, valid, throw, new, IllegalArgumentException, (, path, ), ;]
[DEBUG] == instruction found & cleaned: [Throw, exception, invalid, }]
[DEBUG] == instruction found & cleaned: [resolvedPath, ;]
[DEBUG] == instruction found & cleaned: [Return, the, resolved, path, }]
[DEBUG] == instruction found & cleaned: [public, List, <, Path, >, getAllJavaPaths, (, ), {]
[DEBUG] == instruction found & cleaned: [Get, all, Java, file, paths, in, the, directory, (, Stream, <, Path, >, paths, Files.walk, (, path, ), ), {]
[DEBUG] == instruction found & cleaned: [Walk, the, file, tree, paths.filter, (, Files, ::, isRegularFile, ), Filter, regular, files, .filter, (, p, ->, p.toString, (, ), .endsWith, (, ), ), Filter, Java, files, .forEach, (, p, ->, javaFilePaths.add, (, p.normalize, (, ), ), ), ;]
[DEBUG] == instruction found & cleaned: [Add, Java, file, paths, to, the, list, }]
[DEBUG] == instruction found & cleaned: [catch, (, IOException, e, ), {]
[DEBUG] == instruction found & cleaned: [Handle, IO, exception, e.printStackTrace, (, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [removeModuleInfo, (, ), ;]
[DEBUG] == instruction found & cleaned: [javaFilePaths, ;]
[DEBUG] == instruction found & cleaned: [Return, the, list, of, Java, file, paths, }]
[DEBUG] == instruction found & cleaned: [private, void, removeModuleInfo, (, ), {]
[DEBUG] == instruction found & cleaned: [javaFilePaths.removeIf, (, (, p, ), ->, p.getFileName, (, ), .toString, (, ), .equals, (, ), ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == File Parsing (Tokenizer.java)
[DEBUG] == instruction found & cleaned: [package, com.aspodev.tokenizer, ;]
[DEBUG] == instruction found & cleaned: [import, java.io.IOException, ;]
[DEBUG] == instruction found & cleaned: [import, java.nio.file.Files, ;]
[DEBUG] == instruction found & cleaned: [import, java.nio.file.Path, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.ArrayList, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.Arrays, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.List, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.regex.Pattern, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.stream.Collectors, ;]
[DEBUG] == instruction found & cleaned: [import, com.aspodev.cleaner.Cleaner, ;]
[DEBUG] == instruction found & cleaned: [import, com.aspodev.utils.RegexTools, ;]
[DEBUG] == instruction found & cleaned: [public, class, Tokenizer, {]
[DEBUG] == instruction found & cleaned: [private, StringBuilder, contents, ;]
[DEBUG] == instruction found & cleaned: [private, List, <, String, >, tokens, ;]
[DEBUG] == instruction found & cleaned: [public, Tokenizer, (, Path, path, ), {]
[DEBUG] == instruction found & cleaned: [this.tokens, new, ArrayList, <, >, (, ), ;]
[DEBUG] == instruction found & cleaned: [{]
[DEBUG] == instruction found & cleaned: [this.contents, new, StringBuilder, (, Files.readString, (, path, ), ), ;]
[DEBUG] == instruction found & cleaned: [Cleaner.cleanFile, (, contents, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [catch, (, IOException, e, ), {]
[DEBUG] == instruction found & cleaned: [e.printStackTrace, (, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [public, void, tokenize, (, ), {]
[DEBUG] == instruction found & cleaned: [splitAcrossWhiteSpace, (, ), ;]
[DEBUG] == instruction found & cleaned: [List, <, String, >, OPERATORS, Arrays.asList, (, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ,, ), ;]
[DEBUG] == instruction found & cleaned: [String, OperatorsPattern, OPERATORS.stream, (, ), .sorted, (, (, a, ,, b, ), ->, Integer.compare, (, b.length, (, ), ,, a.length, (, ), ), ), .map, (, Pattern, ::, quote, ), .collect, (, Collectors.joining, (, ), ), ;]
[DEBUG] == instruction found & cleaned: [String, fullRegex, OperatorsPattern, ;]
[DEBUG] == instruction found & cleaned: [this.tokens, this.splitAroundRegex, (, fullRegex, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [public, List, <, String, >, getTokens, (, ), {]
[DEBUG] == instruction found & cleaned: [tokens, ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [private, List, <, String, >, splitAroundRegex, (, String, regex, ), {]
[DEBUG] == instruction found & cleaned: [List, <, String, >, resultList, new, ArrayList, <, >, (, ), ;]
[DEBUG] == instruction found & cleaned: [(, String, token, :]
[DEBUG] == instruction found & cleaned: [this.tokens, ), {]
[DEBUG] == instruction found & cleaned: [(, RegexTools.stringContainsRegex, (, token, ,, regex, ), ), {]
[DEBUG] == instruction found & cleaned: [List, <, String, >, splitTokens, RegexTools.splitAround, (, token, ,, regex, ), ;]
[DEBUG] == instruction found & cleaned: [resultList.addAll, (, splitTokens, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [{]
[DEBUG] == instruction found & cleaned: [resultList.add, (, token, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [resultList, ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [public, String, toString, (, ), {]
[DEBUG] == instruction found & cleaned: [String, result, ;]
[DEBUG] == instruction found & cleaned: [(, String, token, :]
[DEBUG] == instruction found & cleaned: [tokens, ), {]
[DEBUG] == instruction found & cleaned: [result, result, token, ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [result, ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [private, void, splitAcrossWhiteSpace, (, ), {]
[DEBUG] == instruction found & cleaned: [this.tokens, RegexTools.splitAcross, (, contents.toString, (, ), ,, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == File Parsing (LibraryTypes.java)
[DEBUG] == instruction found & cleaned: [package, com.aspodev.TypeParser, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.List, ;]
[DEBUG] == instruction found & cleaned: [import, com.fasterxml.jackson.annotation.JsonProperty, ;]
[DEBUG] == instruction found & cleaned: [public, record, LibraryTypes, (, List, <, String, >, classes, ,, List, <, String, >, interfaces, ,, List, <, String, >, enums, ,, List, <, String, >, annotations, ), {]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == File Parsing (TypeFinder.java)
[DEBUG] == instruction found & cleaned: [package, com.aspodev.TypeParser, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.ArrayList, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.List, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.regex.Matcher, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.regex.Pattern, ;]
[DEBUG] == instruction found & cleaned: [public, class, TypeFinder, {]
[DEBUG] == instruction found & cleaned: [public, static, List, <, TypeToken, >, findAllTypes, (, StringBuilder, contents, ), {]
[DEBUG] == instruction found & cleaned: [String, pkg, findPackage, (, contents, ), ;]
[DEBUG] == instruction found & cleaned: [ArrayList, <, TypeToken, >, result, new, ArrayList, <, >, (, ), ;]
[DEBUG] == instruction found & cleaned: [result.addAll, (, findClasses, (, contents, ,, pkg, ), ), ;]
[DEBUG] == instruction found & cleaned: [result.addAll, (, findInterfaces, (, contents, ,, pkg, ), ), ;]
[DEBUG] == instruction found & cleaned: [result.addAll, (, findEnums, (, contents, ,, pkg, ), ), ;]
[DEBUG] == instruction found & cleaned: [result.addAll, (, findRecords, (, contents, ,, pkg, ), ), ;]
[DEBUG] == instruction found & cleaned: [result, ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [private, static, String, findPackage, (, StringBuilder, contents, ), {]
[DEBUG] == instruction found & cleaned: [String, packageRegex, ;]
[DEBUG] == instruction found & cleaned: [Pattern, pattern, Pattern.compile, (, packageRegex, ,, Pattern.MULTILINE, Pattern.DOTALL, ), ;]
[DEBUG] == instruction found & cleaned: [Matcher, matcher, pattern.matcher, (, contents, ), ;]
[DEBUG] == instruction found & cleaned: [matcher.find, (, ), ?, matcher.group, (, 1, ), :]
[DEBUG] == instruction found & cleaned: [;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [private, static, List, <, TypeToken, >, findType, (, StringBuilder, contents, ,, String, pkg, ,, String, regex, ,, TypeTokenEnum, type, ), {]
[DEBUG] == instruction found & cleaned: [ArrayList, <, TypeToken, >, result, new, ArrayList, <, TypeToken, >, (, ), ;]
[DEBUG] == instruction found & cleaned: [Pattern, pattern, Pattern.compile, (, regex, ,, Pattern.MULTILINE, Pattern.DOTALL, ), ;]
[DEBUG] == instruction found & cleaned: [Matcher, matcher, pattern.matcher, (, contents, ), ;]
[DEBUG] == instruction found & cleaned: [(, matcher.find, (, ), ), {]
[DEBUG] == instruction found & cleaned: [String, className, matcher.group, (, 1, ), ;]
[DEBUG] == instruction found & cleaned: [TypeToken, classToken, new, TypeToken, (, className, ,, pkg, ,, type, ), ;]
[DEBUG] == instruction found & cleaned: [result.add, (, classToken, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [result, ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [private, static, List, <, TypeToken, >, findClasses, (, StringBuilder, contents, ,, String, pkg, ), {]
[DEBUG] == instruction found & cleaned: [findType, (, contents, ,, pkg, ,, ,, TypeTokenEnum.CLASS, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [private, static, List, <, TypeToken, >, findInterfaces, (, StringBuilder, contents, ,, String, pkg, ), {]
[DEBUG] == instruction found & cleaned: [findType, (, contents, ,, pkg, ,, ,, TypeTokenEnum.INTERFACE, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [private, static, List, <, TypeToken, >, findEnums, (, StringBuilder, contents, ,, String, pkg, ), {]
[DEBUG] == instruction found & cleaned: [findType, (, contents, ,, pkg, ,, ,, TypeTokenEnum.ENUM, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [private, static, List, <, TypeToken, >, findRecords, (, StringBuilder, contents, ,, String, pkg, ), {]
[DEBUG] == instruction found & cleaned: [findType, (, contents, ,, pkg, ,, ,, TypeTokenEnum.RECORD, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == File Parsing (TypeParser.java)
[DEBUG] == instruction found & cleaned: [package, com.aspodev.TypeParser, ;]
[DEBUG] == instruction found & cleaned: [import, java.io.IOException, ;]
[DEBUG] == instruction found & cleaned: [import, java.nio.file.Files, ;]
[DEBUG] == instruction found & cleaned: [import, java.nio.file.Path, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.ArrayList, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.HashMap, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.List, ;]
[DEBUG] == instruction found & cleaned: [import, com.aspodev.cleaner.Cleaner, ;]
[DEBUG] == instruction found & cleaned: [public, class, TypeParser, {]
[DEBUG] == instruction found & cleaned: [private, HashMap, <, String, ,, List, <, TypeToken, typeSpace, ;]
[DEBUG] == instruction found & cleaned: [public, TypeParser, (, List, <, Path, >, paths, ), {]
[DEBUG] == instruction found & cleaned: [typeSpace, new, HashMap, <, >, (, ), ;]
[DEBUG] == instruction found & cleaned: [StringBuilder, contents, ;]
[DEBUG] == instruction found & cleaned: [(, Path, path, :]
[DEBUG] == instruction found & cleaned: [paths, ), {]
[DEBUG] == instruction found & cleaned: [{]
[DEBUG] == instruction found & cleaned: [contents, new, StringBuilder, (, Files.readString, (, path, ), ), ;]
[DEBUG] == instruction found & cleaned: [Cleaner.cleanFile, (, contents, ), ;]
[DEBUG] == instruction found & cleaned: [List, <, TypeToken, >, typesFound, TypeFinder.findAllTypes, (, contents, ), ;]
[DEBUG] == instruction found & cleaned: [String, packageName, typesFound.isEmpty, (, ), ?, typesFound.get, (, 0, ), .pkg, (, ), :]
[DEBUG] == instruction found & cleaned: [;]
[DEBUG] == instruction found & cleaned: [typeSpace.computeIfAbsent, (, packageName, ,, (, k, ), ->, new, ArrayList, <, >, (, ), ), .addAll, (, typesFound, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [catch, (, IOException, e, ), {]
[DEBUG] == instruction found & cleaned: [e.printStackTrace, (, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [public, List, <, TypeToken, >, findPackageTypes, (, String, pkg, ), {]
[DEBUG] == instruction found & cleaned: [List, <, String, >, relatedPackages, typeSpace.keySet, (, ), .stream, (, ), .filter, (, (, p, ), ->, p.startsWith, (, pkg, ), ), .toList, (, ), ;]
[DEBUG] == instruction found & cleaned: [ArrayList, <, TypeToken, >, result, new, ArrayList, <, >, (, ), ;]
[DEBUG] == instruction found & cleaned: [(, String, p, :]
[DEBUG] == instruction found & cleaned: [relatedPackages, ), {]
[DEBUG] == instruction found & cleaned: [List, <, TypeToken, >, foundTypes, typeSpace.get, (, p, ), ;]
[DEBUG] == instruction found & cleaned: [result.addAll, (, foundTypes, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [result, ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [public, boolean, isType, (, String, token, ,, String, pkg, ), {]
[DEBUG] == instruction found & cleaned: [List, <, TypeToken, >, packageTypes, this.findPackageTypes, (, pkg, ), ;]
[DEBUG] == instruction found & cleaned: [(, TypeToken, type, :]
[DEBUG] == instruction found & cleaned: [packageTypes, ), {]
[DEBUG] == instruction found & cleaned: [(, type.name, (, ), .equals, (, token, ), ), true, ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [false, ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == File Parsing (TypeSpace.java)
[DEBUG] == instruction found & cleaned: [package, com.aspodev.TypeParser, ;]
[DEBUG] == instruction found & cleaned: [import, java.io.IOException, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.ArrayList, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.Comparator, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.HashSet, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.List, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.Set, ;]
[DEBUG] == instruction found & cleaned: [import, com.aspodev.utils.JsonTools, ;]
[DEBUG] == instruction found & cleaned: [public, class, TypeSpace, {]
[DEBUG] == instruction found & cleaned: [private, Set, <, TypeToken, >, typeSpace, ;]
[DEBUG] == instruction found & cleaned: [private, static, final, List, <, TypeToken, >, defaultTypes, TypeSpace.loadStandardTypes, (, ), ;]
[DEBUG] == instruction found & cleaned: [public, TypeSpace, (, ), {]
[DEBUG] == instruction found & cleaned: [this.typeSpace, new, HashSet, <, TypeToken, >, (, 256, ), ;]
[DEBUG] == instruction found & cleaned: [this.typeSpace.addAll, (, defaultTypes, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [public, void, addPackage, (, String, pkg, ,, TypeParser, globalTypeSpace, ), {]
[DEBUG] == instruction found & cleaned: [List, <, TypeToken, >, foundTypes, globalTypeSpace.findPackageTypes, (, pkg, ), ;]
[DEBUG] == instruction found & cleaned: [typeSpace.addAll, (, foundTypes, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [public, void, addType, (, String, name, ,, String, pkg, ,, TypeTokenEnum, type, ), {]
[DEBUG] == instruction found & cleaned: [typeSpace.add, (, new, TypeToken, (, name, ,, pkg, ,, type, ), ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [public, void, addType, (, TypeToken, typeToken, ), {]
[DEBUG] == instruction found & cleaned: [typeSpace.add, (, typeToken, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [public, void, addWildCardPackage, (, String, pkg, ,, TypeParser, globalTypeSpace, ), {]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [public, static, List, <, TypeToken, >, loadStandardTypes, (, ), {]
[DEBUG] == instruction found & cleaned: [List, <, TypeToken, >, standardList, new, ArrayList, <, >, (, ), ;]
[DEBUG] == instruction found & cleaned: [{]
[DEBUG] == instruction found & cleaned: [LibraryTypes, StandardTypes, JsonTools.readJsonObject, (, ,, LibraryTypes.class, ), ;]
[DEBUG] == instruction found & cleaned: [StandardTypes.classes, (, ), .forEach, (, (, className, ), ->, standardList.add, (, new, TypeToken, (, className, ,, ,, TypeTokenEnum.CLASS, ), ), ), ;]
[DEBUG] == instruction found & cleaned: [StandardTypes.interfaces, (, ), .forEach, (, (, className, ), ->, standardList.add, (, new, TypeToken, (, className, ,, ,, TypeTokenEnum.INTERFACE, ), ), ), ;]
[DEBUG] == instruction found & cleaned: [StandardTypes.enums, (, ), .forEach, (, (, className, ), ->, standardList.add, (, new, TypeToken, (, className, ,, ,, TypeTokenEnum.ENUM, ), ), ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [catch, (, IOException, e, ), {]
[DEBUG] == instruction found & cleaned: [e.printStackTrace, (, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [List, <, String, >, primitiveList, List.of, (, ,, ,, ,, ,, ,, ,, ,, ), ;]
[DEBUG] == instruction found & cleaned: [primitiveList.forEach, (, (, primitive, ), ->, standardList.add, (, new, TypeToken, (, primitive, ,, ,, TypeTokenEnum.PRIMITVE, ), ), ), ;]
[DEBUG] == instruction found & cleaned: [standardList, ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [public, String, toString, (, ), {]
[DEBUG] == instruction found & cleaned: [StringBuilder, sb, new, StringBuilder, (, ), ;]
[DEBUG] == instruction found & cleaned: [sb.append, (, ), .append, (, typeSpace.size, (, ), ), .append, (, ), ;]
[DEBUG] == instruction found & cleaned: [sb.append, (, ), ;]
[DEBUG] == instruction found & cleaned: [typeSpace.stream, (, ), .sorted, (, Comparator.comparing, (, TypeToken, ::, pkg, ), ), .forEach, (, t, ->, sb.append, (, String.format, (, ,, t.name, (, ), ,, t.pkg, (, ), ,, t.type, (, ), ), ), ), ;]
[DEBUG] == instruction found & cleaned: [sb.append, (, ), ;]
[DEBUG] == instruction found & cleaned: [sb.toString, (, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == File Parsing (TypeToken.java)
[DEBUG] == instruction found & cleaned: [package, com.aspodev.TypeParser, ;]
[DEBUG] == instruction found & cleaned: [public, record, TypeToken, (, String, name, ,, String, pkg, ,, TypeTokenEnum, type, ), {]
[DEBUG] == instruction found & cleaned: [public, String, getFullName, (, ), {]
[DEBUG] == instruction found & cleaned: [(, this.pkg, (, ), this.name, (, ), ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == File Parsing (TypeTokenEnum.java)
[DEBUG] == instruction found & cleaned: [package, com.aspodev.TypeParser, ;]
[DEBUG] == instruction found & cleaned: [public, enum, TypeTokenEnum, {]
[DEBUG] == instruction found & cleaned: [CLASS, ,, INTERFACE, ,, RECORD, ,, ENUM, ,, PRIMITVE, ,, IMPORTED, }]
[DEBUG] == File Parsing (JsonTools.java)
[DEBUG] == instruction found & cleaned: [package, com.aspodev.utils, ;]
[DEBUG] == instruction found & cleaned: [import, java.io.IOException, ;]
[DEBUG] == instruction found & cleaned: [import, java.io.InputStream, ;]
[DEBUG] == instruction found & cleaned: [import, com.fasterxml.jackson.databind.ObjectMapper, ;]
[DEBUG] == instruction found & cleaned: [public, class, JsonTools, {]
[DEBUG] == instruction found & cleaned: [public, static, <, T, >, T, readJsonObject, (, String, jsonResourcePath, ,, Class, <, T, >, clazz, ), throws, IOException, {]
[DEBUG] == instruction found & cleaned: [ObjectMapper, objectMapper, new, ObjectMapper, (, ), ;]
[DEBUG] == instruction found & cleaned: [InputStream, is, JsonTools.class.getResourceAsStream, (, jsonResourcePath, ), ;]
[DEBUG] == instruction found & cleaned: [(, is, null, ), throw, new, IOException, (, ), ;]
[DEBUG] == instruction found & cleaned: [objectMapper.readValue, (, is, ,, clazz, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == File Parsing (RegexTools.java)
[DEBUG] == instruction found & cleaned: [package, com.aspodev.utils, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.ArrayList, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.List, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.regex.Matcher, ;]
[DEBUG] == instruction found & cleaned: [import, java.util.regex.Pattern, ;]
[DEBUG] == instruction found & cleaned: [public, class, RegexTools, {]
[DEBUG] == instruction found & cleaned: [public, static, void, removePattern, (, StringBuilder, str, ,, String, regex, ), {]
[DEBUG] == instruction found & cleaned: [Pattern, pattern, Pattern.compile, (, regex, ,, Pattern.MULTILINE, Pattern.DOTALL, ), ;]
[DEBUG] == instruction found & cleaned: [Matcher, matcher, pattern.matcher, (, str, ), ;]
[DEBUG] == instruction found & cleaned: [StringBuilder, temp, new, StringBuilder, (, ), ;]
[DEBUG] == instruction found & cleaned: [int, lastEnd, 0, ;]
[DEBUG] == instruction found & cleaned: [(, matcher.find, (, ), ), {]
[DEBUG] == instruction found & cleaned: [temp.append, (, str, ,, lastEnd, ,, matcher.start, (, ), ), ;]
[DEBUG] == instruction found & cleaned: [lastEnd, matcher.end, (, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [temp.append, (, str, ,, lastEnd, ,, str.length, (, ), ), ;]
[DEBUG] == instruction found & cleaned: [str.setLength, (, 0, ), ;]
[DEBUG] == instruction found & cleaned: [str.append, (, temp, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [public, static, List, <, String, >, splitAround, (, String, str, ,, String, regex, ), {]
[DEBUG] == instruction found & cleaned: [List, <, String, >, result, new, ArrayList, <, >, (, ), ;]
[DEBUG] == instruction found & cleaned: [Pattern, pattern, Pattern.compile, (, regex, ,, Pattern.MULTILINE, Pattern.DOTALL, ), ;]
[DEBUG] == instruction found & cleaned: [Matcher, matcher, pattern.matcher, (, str, ), ;]
[DEBUG] == instruction found & cleaned: [int, lastEnd, 0, ;]
[DEBUG] == instruction found & cleaned: [(, matcher.find, (, ), ), {]
[DEBUG] == instruction found & cleaned: [(, matcher.start, (, ), >, lastEnd, ), {]
[DEBUG] == instruction found & cleaned: [result.add, (, str.substring, (, lastEnd, ,, matcher.start, (, ), ), ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [result.add, (, matcher.group, (, ), ), ;]
[DEBUG] == instruction found & cleaned: [lastEnd, matcher.end, (, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [(, lastEnd, <, str.length, (, ), ), {]
[DEBUG] == instruction found & cleaned: [result.add, (, str.substring, (, lastEnd, ), ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [result, ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [public, static, List, <, String, >, splitAcross, (, String, str, ,, String, regex, ), {]
[DEBUG] == instruction found & cleaned: [List, <, String, >, result, new, ArrayList, <, >, (, ), ;]
[DEBUG] == instruction found & cleaned: [Pattern, pattern, Pattern.compile, (, regex, ,, Pattern.MULTILINE, Pattern.DOTALL, ), ;]
[DEBUG] == instruction found & cleaned: [Matcher, matcher, pattern.matcher, (, str, ), ;]
[DEBUG] == instruction found & cleaned: [int, lastEnd, 0, ;]
[DEBUG] == instruction found & cleaned: [(, matcher.find, (, ), ), {]
[DEBUG] == instruction found & cleaned: [(, matcher.start, (, ), >, lastEnd, ), {]
[DEBUG] == instruction found & cleaned: [result.add, (, str.substring, (, lastEnd, ,, matcher.start, (, ), ), ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [lastEnd, matcher.end, (, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [(, lastEnd, <, str.length, (, ), ), {]
[DEBUG] == instruction found & cleaned: [result.add, (, str.substring, (, lastEnd, ), ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [result, ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [public, static, boolean, stringContainsRegex, (, String, str, ,, String, regex, ), {]
[DEBUG] == instruction found & cleaned: [Pattern, pattern, Pattern.compile, (, regex, ,, Pattern.MULTILINE, Pattern.DOTALL, ), ;]
[DEBUG] == instruction found & cleaned: [Matcher, matcher, pattern.matcher, (, str, ), ;]
[DEBUG] == instruction found & cleaned: [matcher.find, (, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == File Parsing (MainWeb.java)
[DEBUG] == instruction found & cleaned: [package, com.aspodev.web, ;]
[DEBUG] == instruction found & cleaned: [public, class, MainWeb, {]
[DEBUG] == instruction found & cleaned: [public, static, void, main, (, String, [, ], args, ), {]
[DEBUG] == instruction found & cleaned: [System.out.println, (, ), ;]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == instruction found & cleaned: [}]
[DEBUG] == EXECUTION TIME: 280
